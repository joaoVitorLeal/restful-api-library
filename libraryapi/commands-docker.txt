# Create a network connection between containers (NOTE: must be created before the containers)
sudo docker network create library-network

# Run Postgres container (version 16.3)
sudo docker run --name librarydb -p 5432:5432 -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=library --network library-network -d postgres:16.3

# Run PgAdmin 4
sudo docker run --name pgadmin4 -p 15432:80 -e PGADMIN_DEFAULT_EMAIL=joaoleal98@outlook.com -e PGADMIN_DEFAULT_PASSWORD=admin --network library-network -d dpage/pgadmin4

# Utility commands:

# List running containers
sudo docker ps

# List all containers (including stopped ones)
sudo docker ps -a

# Remove a container
sudo docker container rm <container_name>
sudo docker rm <container_name>

# Force remove a container (even if running)
sudo docker container rm -f <container_name>
sudo docker rm -f <container_name>

# Start a container
sudo docker start <container_name>

# Stop a container
sudo docker stop <container_name>

# List available images
sudo docker images

# Clean build cache (useful with Docker Desktop to resolve build context issues)
docker builder prune

# View container logs
sudo docker logs libraryapi-production

# Run a container using environment variables from file
docker run --env-file ./env.vars joaolealdev/libraryapi

# Alternative example with port mapping
sudo docker run --env-file ./env.vars -p 8080:8080 -p 9090:9090 joaolealdev/libraryapi

---
###### Production Environment ######

# Production Postgres container
sudo docker run --name librarydb-prod -e POSTGRES_USER=postgresprod -e POSTGRES_PASSWORD=postgresprod -e POSTGRES_DB=library -p 5433:5432 -d --network library-network postgres:16.3

# Run application container from image
sudo docker run --name libraryapi-production -e DATASOURCE_URL=jdbc:postgresql://librarydb-prod:5432/library -e DATASOURCE_USERNAME=postgresprod -e DATASOURCE_PASSWORD=postgresprod --network library-network -d -p 8080:8080 -p 9090:9090 joaolealdev/libraryapi