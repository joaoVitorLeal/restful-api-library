spring:
  application:
    name: libraryapi
  output:
    ansi:
      enabled: ALWAYS # Habilitando cores no console - melhor visualização de logging de erro, warns, etc.
  datasource:
    url: jdbc:postgresql://localhost:5432/library
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver # Caminho para o Driver.class (postgres) localizado nas livrarias externas
  jpa:
    show-sql: true # Exibe o SQL gerado no console
    hibernate:
      ddl-auto: none   # update: Atualiza o esquema do banco de dados conforme as entidades, sem apagar dados existentes
                       # Opções:
                       # none: Não faz nenhuma modificação no esquema do banco (padrão)
                       # create-drop: Cria o esquema no início da aplicação e o apaga ao final da execução. Ideal para testes de integração
    properties:
      hibernate.format_sql: true # Realiza a indentação do SQL gerado e exibido no console. Facilitando a visualização
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}

# Doc: Desabilita respostas genéricas na documentação da API (SWAGGER)
springdoc:
  override-with-generic-response: false

logging:
  pattern:    # pattern.console: 'Customizando formato de exibição de datas, horas, cores e exibições de logs do console' #
    console: '%clr(%d{dd-MM-yyyy HH:mm:ss}){faint} %clr(%5p) %clr([%t]){faint} %clr(%-40.40logger){cyan} %clr(:){yellow} %m%n'
  file:
    name: logs/app.log # Gerando arquivos de log
  level: # Existem 5 níveis de log:
          # 1 - trace -> abrange os logs de TODA aplicação!
          # 2 - debug -> informações de debug
          # 3 - info -> funcionamentos gerais da aplicação
          # 4 - warn -> indica eventos potencialmente problemáticos
          # 5 - error -> erros gerais, exceções
          # Nível hierárquico, onde o superior abrange todos os seus inferiores.
          # Ou seja, caso seja definido como 'info'(3) os logs armazenação são de 'info', 'warn' e 'error'.
    root: warn # 'root' => toda aplicação. 'warn' qual quer log de warn deve ser exibido.
    # Especifica o pacote  e qual level de log que se deseja verificar #
    io:
      github:
        joaoVitorLeal: trace
    org:
      springframework:
        web: debug
        security: trace

# configuração para o Spring Actuator
management:
  server:
    port: 9090 # porta para ver as métricas da aplicação. É ideal que seja em uma porta diferente da porta da aplicação
  endpoints:
    web:
      exposure:
        include: '*' # inclui todos os endpoints do Actuator. Caso queira endpoints específicos, utilizar da seguinte maneira -> include: metrics, beans, configprops
